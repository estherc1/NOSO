chi_co <- co_final %>% mutate(Test=(Phase=='Test')) %>%
(function(x) {chisq.test(table(x$Test, x$Status))})
chi_co$residuals
chi_wl <- wl_final %>% mutate(Test=(Phase=='Test'), Create =(Status %in% c('Create_S', 'Create_F'))) %>%
(function(x) {chisq.test(table(x$Test, x$Create))})
chi_wl$residuals
### GLM method:
mod_co = glm(Status ~ Phase, data=co_final, family = binomial())
summary(mod_co)
mod_wl = wl_final %>%
mutate(Test=(Phase=='Test'), Create =(Status %in% c('Create_S', 'Create_F'))) %>%
(function(x) {glm(Create~Test, data=x, family=binomial())})
shiny::runApp('~/Downloads/ab_test/power')
# Bernoulli random walk
# rbinom with size = 1 is nothing but Bernoulli distribution
epsilon_ber <- 2*rbinom(100,1,p=0.5)-1     # converting the values 0, 1 to -1, 1
x_ber <- cumsum(epsilon_ber)
plot(x_ber, type='l')
epsilon_norm <- rnorm(100, 0, sd=0.1)
x_norm <- cumsum(epsilon_norm)
plot(x_norm, type='l')
epsilon_exp <- rexp(100, rate=10)
x_exp <- cumsum(epsilon_exp)
plot(x_exp, type='l')
# poisson random walk
# poisson random variable models the count of customers arriving within a fixed time
epsilon_pois <- rpois(100, lambda=0.1)
x_pois <- cumsum(epsilon_pois)
plot(x_pois, type='l')
N<-10000
epsilon1_ber <-  2 * rbinom(N,1,p=0.5) - 1
epsilon2_ber <-  2 * rbinom(N,1,p=0.5) - 1
x_ber <-  cumsum(epsilon1_ber)
y_ber <-  cumsum(epsilon2_ber)
plot(x_ber, y_ber, type='l')
N<-10000
epsilon1_norm <-  rnorm(N,0,0.1)
epsilon2_norm <-  rnorm(N,0,0.1)
x_norm <-  cumsum(epsilon1_norm)
y_norm <-  cumsum(epsilon2_norm)
plot(x_norm, y_norm, type='l')
##################
## SnP500
##################
# SnP500 index price series
library(quantmod)
options("getSymbols.warning4.0"=FALSE)
sp500<-new.env()
startDate = as.Date('1960-01-04')
endDate   = as.Date('2018-11-24')
getSymbols('^GSPC',env=sp500, src='yahoo', from=startDate,
to=endDate, auto.assign=T)
# No dividend for a stock index, but useful for the individual stocks
getDividends('^GSPC', env=sp500, src='yahoo', from=startDate,
to=endDate,auto.assign=T)
# No split for a stock index, but useful for the individual stocks
getSplits('^GSPC', env=sp500, src='yahoo',from=startDate,to=endDate,auto.assign=T)
head(sp500$GSPC)
tail(sp500$GSPC)
class(sp500$GSPC)
sp_prc<-sp500$GSPC[,6]
class(sp_prc)    # xts, zoo      'zoo' stands for Z's ordered observations
#1960-01-04         59.91
#2018-11-23       2632.56
# total return    (2901.13-59.91)/59.91 ~ 47.4248
# daily return
plot(sp_prc, auto.grid=T)#, grid.ticks.on='M')
ret_sp500_daily<-(sp_prc-lag(sp_prc))/lag(sp_prc)
runApp('~/Desktop/cancershiny')
getwd
getwd()
setwd("/Users/hee-wonchang/Desktop/NOSO/Esther/Shiny")
getwd()
cancdata <- read.csv("uno_inv_agg.csv")
rm(list=ls())
setwd("/Users/hee-wonchang/Desktop/NOSO/Esther/Shiny")
uno <- read.csv("uno_inv_agg.csv")
head(uno)
rm(list=ls())
setwd("/Users/hee-wonchang/Desktop/NOSO/Esther/Shiny")
uno <- read.csv("uno_inv_agg.csv")[,-1]
head(uno)
class(uno)
class(uno[1])
dim(uno)
class(uno[1:7])
class(uno[2])
class(uno[,2])
class(uno[,1:7])
class(uno[,1])
colnames(uno) <- c("Product_Description","Date","Out_Qty","In_Qty","Warehouse_Qty","Unit_Price","ID")
head(uno)
uno <- uno[,c(2:6,1)]
head(uno)
rm(list=ls())
setwd("/Users/hee-wonchang/Desktop/NOSO/Esther/Shiny")
uno <- read.csv("uno_inv_agg.csv")[,-1]
colnames(uno) <- c("Product_Description","Date","Out_Qty","In_Qty","Warehouse_Qty","Unit_Price","ID")
uno <- uno[,c(7,1:6)]
head(uno)
class(uno[,7])
class(uno[,6])
class(uno[,5])
class(uno[,4])
class(uno[,3])
as.Date(uno[,3], "%Y-%M/%d")[1]
as.Date(uno[,3], "%Y-%M-%d")[1]
as.Date(uno[,3], "%Y-%m-%d")[1]
uno[,3] <- as.Date(uno[,3], "%Y-%m-%d")
class(uno[,3])
write.csv(uno,"uno.csv")
uno <- read.csv("uno.csv")
head(uno)
uno <- read.csv("uno.csv",row.names = FALSE)
uno <- read.csv("uno.csv")[,-1]
head(uno)
class(uno[,3])
class(uno[,4])
class(uno[,5])
length(unique(uno$ID)])
length(unique(uno$ID))
unom <- read.csv("mdata.csv")[,-1]
head(unom)
class(unom[,3])
unoq <- read.csv("qdata.csv")[,-1]
head(unoq)
as.Date(unoq[,3], "%Y%q")[1]
as.Date(unoq[,3], "%Y%q")[1]
head(uno)
head(unom)
sum(is.na(uno$Unit_Price))
as.Date(unoq[,3], "%Y0%q")[1]
as.Date(unoq[,3], "%Y%Q")[1]
as.Date(unoq[,3], "%Y0%Q")[1]
head(unoq)
class(unoq[,3])
unom <- read.csv("mdata.csv")[,-1]
colnames(unom) <- c("ID","Product_Description","Date","Out_Qty","In_Qty","Warehouse_Qty","Unit_Price")
unom[,3] <- as.Date(unom[,3], "%Y-%m")
unoq <- read.csv("qdata.csv")[,-1]
colnames(unoq) <- c("ID","Product_Description","Date","Out_Qty","In_Qty","Warehouse_Qty","Unit_Price")
?complete.cases
uno <- read.csv("uno_inv_agg.csv")[,-1]
colnames(uno) <- c("Product_Description","Date","Out_Qty","In_Qty","Warehouse_Qty","Unit_Price","ID")
uno <- uno[,c(7,1:6)]
uno[,3] <- as.Date(uno[,3], "%Y-%m-%d")
uno <- uno[complete.cases(uno),]
unom <- read.csv("mdata.csv")[,-1]
colnames(unom) <- c("ID","Product_Description","Date","Out_Qty","In_Qty","Warehouse_Qty","Unit_Price")
unom[,3] <- as.Date(unom[,3], "%Y-%m")
unom <- unom[complete.cases(unom),]
unoq <- read.csv("qdata.csv")[,-1]
colnames(unoq) <- c("ID","Product_Description","Date","Out_Qty","In_Qty","Warehouse_Qty","Unit_Price")
unoq <- unoq[complete.cases(unoq),]
#EDA: DTA1B2073BRN-PJA
unom  %>% select(ID="DTA1B2073BRN-PJA")
#EDA: DTA1B2073BRN-PJA
unom  %>% select(ID=="DTA1B2073BRN-PJA")
#EDA: DTA1B2073BRN-PJA
unom  %>% select(Product_Description=="DTA1B2073BRN-PJA")
#EDA: DTA1B2073BRN-PJA
unom  %>% select(ID=="DTA1B2073BRN-PJA")
#EDA: DTA1B2073BRN-PJA
unom  %>% filter(ID=="DTA1B2073BRN-PJA")
uno %>% filter(ID=="DTA1B2073BRN-PJA")
unoq %>% filter(ID=="DTA1B2073BRN-PJA")
unom %>% filter(ID=="DTA1B2073BRN-PJA")
#EDA: DTA1B2073BRN-PJA
unoq  %>% filter(ID=="DTA1B2073BRN-PJA")
#EDA: DTA1B2073BRN-PJA
unoq  %>% filter(ID=="DTA1B2073BRN-PJA") %>% summarise(ITR = sum(Out_Qty*Unit_Price)/avg(Warehouse_Qty))
#EDA: DTA1B2073BRN-PJA
unoq  %>% filter(ID=="DTA1B2073BRN-PJA") %>% summarise(ITR = sum(Out_Qty*Unit_Price)/mean(Warehouse_Qty))
head(unom)
unom <- read.csv("mdata.csv")[,-1]
head(unom)
unom[,3] <- as.Date(unom[,3], "%Y-%m")
head(unom)
unom <- read.csv("mdata.csv")[,-1]
colnames(unom) <- c("ID","Product_Description","Date","Out_Qty","In_Qty","Warehouse_Qty","Unit_Price")
unom <- unom[complete.cases(unom),]
unom  %>% filter(ID=="DTA1B2073BRN-PJA") %>% summarise(ITR = sum(Out_Qty*Unit_Price)/mean(Warehouse_Qty))
#EDA: DTA1B2073BRN-PJA
unoq  %>% filter(ID=="DTA1B2073BRN-PJA") %>% summarise(ITR = sum(Out_Qty*Unit_Price)/mean(Warehouse_Qty))
unoq  %>% filter(ID=="DTA1B2073BRN-PJA")
#EDA: DTA1B2073BRN-PJA
unoq  %>% filter(ID=="DTA1B2073BRN-PJA") %>% summarise(ITR = sum(Out_Qty*Unit_Price/2)/mean(Warehouse_Qty))
unom  %>% filter(ID=="DTA1B2073BRN-PJA") %>% summarise(ITR = sum(Out_Qty*Unit_Price/2)/mean(Warehouse_Qty))
#EDA: DTA1B2073BRN-PJA
unoq  %>% filter(ID=="DTA1B2073BRN-PJA") %>% summarise(ITR = sum(Out_Qty)/mean(Warehouse_Qty))
unom  %>% filter(ID=="DTA1B2073BRN-PJA") %>% summarise(ITR = sum(Out_Qty)/mean(Warehouse_Qty))
unoq  %>% filter(ID=="DTA1B2073BRN-PJA") %>% summarise(ITR = sum(Out_Qty)/mean(Warehouse_Qty),
ITR_d = 365/ITR)
unom  %>% filter(ID=="DTA1B2073BRN-PJA") %>% summarise(ITR = sum(Out_Qty)/mean(Warehouse_Qty),
ITR_d = 365/ITR)
if(TRUE) {unom  %>% filter(ID=="DTA1B2073BRN-PJA") %>% summarise(ITR = sum(Out_Qty)/mean(Warehouse_Qty),ITR_d = 365/ITR)} else {0}
unoq  %>% filter(ID=="DTA1B2073BRN-PJA")
unoq  %>% filter(ID=="DTA1B2073BRN-PJA") %>% select(Warehouse_Qty)
unoq  %>% filter(ID=="DTA1B2073BRN-PJA") %>% select(Warehouse_Qty) %>% tail(1)
unom  %>% filter(ID=="DTA1B2073BRN-PJA") %>% summarise(ITR = sum(Out_Qty)/mean(Warehouse_Qty))
#EDA: DTA1B2073BRN-PJA
unoq  %>% filter(ID=="DTA1B2073BRN-PJA") %>% summarise(ITR = round(sum(Out_Qty*.5*Unit_Price)/mean(Warehouse_Qty),2),
ITR_d = 365/ITR)
#plot demo
eda1 <- unoq  %>% filter(ID=="DTA1B2073BRN-PJA")
eda1 <- unoq  %>% filter(ID=="DTA1B2073BRN-PJA")
ggplot(eda1, aes(x=Date, y=Out_Qty))+
geom_bar(stat='identity', fill="turquoise") +
ylab("Inventory Quantity") + xlab("") + ggtitle("Inventory Flow Over Time")+
scale_fill_brewer(palette="Dark2")+
coord_flip()
ggplot(eda1, aes(x=Date, y=Out_Qty))+
geom_line() +
ylab("Inventory Quantity") + xlab("") + ggtitle("Inventory Flow Over Time")+
scale_fill_brewer(palette="Dark2")+
coord_flip()
ggplot(eda1, aes(x=Date, y=Out_Qty))+
geom_line() +
ylab("Inventory Quantity") + xlab("") + ggtitle("Inventory Flow Over Time")+
scale_fill_brewer(palette="Dark2")+
coord_flip()
ggplot(eda1, aes(x=Date, y=Warehouse_Qty)) +
geom_line() +
geom_point() +
xlab("") + ylab("Incidence per 100,000") +
ggtitle("Timeline of Cancer Incidence Rate")
ggplot(eda1, aes(x=Date, y=Warehouse_Qty)) +
geom_line() +
geom_point() +
xlab("") + ylab("Quantity") +
ggtitle("Inventory Flow Analysis")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
## Messy Data Type #1
```{r}
head(billboard)
billboard <- readr::read_csv("./data/billboard.csv")
head(billboard)
billboard <- readr::read_csv("billboard.csv")
head(billboard)
billboard2 <- billboard %>%
gather(key="week", value="rank", wk1:wk76, na.rm = TRUE)
head(billboard2)
eda1
#plot demo
eda1 <- unoq  %>% filter(ID=="DTA1B2073BRN-PJA")%>%
gather(key="InvFlow", value="Qty", c('Out_Qty','In_Qty','Warehouse_Qty'))
eda1
eda1 <- unoq  %>% filter(ID=="DTA1B2073BRN-PJA")%>%
gather(key="InvFlow", value="Qty", c('Out_Qty','In_Qty','Warehouse_Qty'))
ggplot(eda1, aes(x=Date, y=Qty, group=InvFlow)) +
geom_line(aes(color=InvFlow)) +
geom_point(aes(color=InvFlow)) +
xlab("") + ylab("Quantity") +
ggtitle("Inventory Flow Analysis")
library(plotly)
ggplot(eda1,
aes(x=Date, y=Qty, group=Inv_Traffic)) + geom_line(aes(color=Inv_Traffic)) +
geom_point(aes(color=Inv_Traffic)) + xlab("") + ylab("Quantity") +
ggtitle("Inventory Flow Analysis")
eda1 <- unoq  %>% filter(ID=="DTA1B2073BRN-PJA")%>%
gather(key="Inv_Traffic", value="Qty", c('Out_Qty','In_Qty','Warehouse_Qty'))
ggplot(eda1,
aes(x=Date, y=Qty, group=Inv_Traffic)) + geom_line(aes(color=Inv_Traffic)) +
geom_point(aes(color=Inv_Traffic)) + xlab("") + ylab("Quantity") +
ggtitle("Inventory Flow Analysis")
eda2 <- unoq  %>% filter(ID=="DTA1B2073BRN-PJA")
eda2 <- unoq  %>% filter(ID=="DTA1B2073BRN-PJA")
eda2
eda2 <- unoq  %>% filter(ID=="DTA1B2073BRN-PJA")
p <- plot_ly(eda2, x = ~Date, y = ~In_Qty, name = 'In Qty', type = 'scatter', mode = 'lines+markers') %>%
add_trace(y = ~Out_Qty, name = 'Out Qty', mode = 'lines+markers') %>%
add_trace(y = ~Warehouse_Qty, name = 'Warehour Qty', mode = 'markers')
chart_link = api_create(p, filename="line-mode1")
chart_link
p <- plot_ly(eda2, x = ~Date, y = ~In_Qty, name = 'In Qty', type = 'scatter', mode = 'lines+markers') %>%
add_trace(y = ~Out_Qty, name = 'Out Qty', mode = 'lines+markers') %>%
add_trace(y = ~Warehouse_Qty, name = 'Warehour Qty', mode = 'markers')
p
p <- plot_ly(eda2, x = ~Date, y = ~In_Qty, name = 'In Qty', type = 'scatter', mode = 'lines+markers') %>%
add_trace(y = ~Out_Qty, name = 'Out Qty', mode = 'lines+markers') %>%
add_trace(y = ~Warehouse_Qty, name = 'Warehouse Qty', mode = 'lines+markers')
p
plot_ly(unoq  %>% filter(ID=="DTA1B2073BRN-PJA"), x = ~Date, y = ~In_Qty, name = 'In Qty', type = 'scatter', mode = 'lines+markers') %>%
add_trace(y = ~Out_Qty, name = 'Out Qty', mode = 'lines+markers') %>%
add_trace(y = ~Warehouse_Qty, name = 'Warehouse Qty', mode = 'lines+markers')%>%
layout(title = "Inventory Flow Analysis",
xaxis = list(title = "Months"),
yaxis = list (title = "Quantity"))
unoq  %>% filter(ID=="DTA1B2073BRN-PJA")
unoq  %>% filter(ID=="DTA1B2073BRN-PJA") %>% select(-Unit_Price)
unoq  %>% filter(ID=="DTA1B2073BRN-PJA") %>% select(-c(Unit_Price,ID))
datatable(unoq  %>% filter(ID=="DTA1B2073BRN-PJA") %>% select(-c(Unit_Price,ID)))
runApp()
runApp()
#EDA: DTA1B2073BRN-PJA
unom  %>% filter(ID=="DTA1B2073BRN-PJA") %>% summarise(ITR = round(sum(Out_Qty*.5*Unit_Price)/mean(Warehouse_Qty),2),
ITR_d = 365/ITR)
rm(list=ls())
setwd("/Users/hee-wonchang/Desktop/NOSO/Esther/Shiny")
library(DT)
library(shiny)
library(shinydashboard)
library(dplyr)
library(googleVis)
library(ggplot2)
library(RColorBrewer)
library(plotly)
unom <- read.csv("mdata.csv")[,-1]
colnames(unom) <- c("ID","Product_Description","Date","Out_Qty","In_Qty","Warehouse_Qty","Unit_Price")
unom <- unom[complete.cases(unom),]
unoq <- read.csv("qdata.csv")[,-1]
colnames(unoq) <- c("ID","Product_Description","Date","Out_Qty","In_Qty","Warehouse_Qty","Unit_Price")
unoq <- unoq[complete.cases(unoq),]
#EDA: DTA1B2073BRN-PJA
unom  %>% filter(ID=="DTA1B2073BRN-PJA") %>% summarise(ITR = round(sum(Out_Qty*.5*Unit_Price)/mean(Warehouse_Qty),2),
ITR_d = 365/ITR)
unom  %>% filter(ID=="DTA1B2073BRN-PJA") %>% summarise(ITR = sum(Out_Qty)/mean(Warehouse_Qty),
ITR_d = 365/ITR)
unom  %>% filter(ID=="DTA1B2073BRN-PJA") %>% summarise(ITR = sum(Out_Qty)/mean(Warehouse_Qty),
ITR_d = 365/ITR)
#EDA: DTA1B2073BRN-PJA
unoq  %>% filter(ID=="DTA1B2073BRN-PJA") %>% summarise(ITR = sum(Out_Qty)/mean(Warehouse_Qty),
ITR_d = 365/ITR)
unom  %>% filter(ID=="DTA1B2073BRN-PJA") %>% summarise(ITR = sum(Out_Qty)/mean(Warehouse_Qty),
ITR_d = 365/ITR)
unoq  %>% filter(ID=="DTA1B2073BRN-PJA") %>% select(Warehouse_Qty) %>% tail(1)
unom  %>% filter(ID=="DTA1B2073BRN-PJA") %>% select(Warehouse_Qty) %>% tail(1)
#plot demo
eda1 <- unoq  %>% filter(ID=="DTA1B2073BRN-PJA")%>%
gather(key="Inv_Traffic", value="Qty", c('Out_Qty','In_Qty','Warehouse_Qty'))
ggplot(eda1,
aes(x=Date, y=Qty, group=Inv_Traffic)) + geom_line(aes(color=Inv_Traffic)) +
geom_point(aes(color=Inv_Traffic)) + xlab("") + ylab("Quantity") +
ggtitle("Inventory Flow Analysis")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?fluidPage
runApp()
runApp()
## read csv
data <- fread(input = "mdata.csv",
sep = ",",
header = TRUE)
library(RSQLite)
library(data.table)
csvpath = "/Users/hee-wonchang/Desktop/NOSO/Esther/Shiny/mdata.csv"
dbname = "./mdata.sqlite"
tblname = "mdata"
## read csv
data <- fread(input = csvpath,
sep = ",",
header = TRUE)
## connect to database
conn <- dbConnect(drv = SQLite(),
dbname = dbname)
## write table
dbWriteTable(conn = conn,
name = tblname,
value = data)
## list tables
dbListTables(conn)
## disconnect
dbDisconnect(conn)
csvpath = "/Users/hee-wonchang/Desktop/NOSO/Esther/Shiny/qdata.csv"
dbname = "./qdata.sqlite"
tblname = "qdata"
## read csv
data <- fread(input = csvpath,
sep = ",",
header = TRUE)
## connect to database
conn <- dbConnect(drv = SQLite(),
dbname = dbname)
## write table
dbWriteTable(conn = conn,
name = tblname,
value = data)
## list tables
dbListTables(conn)
## disconnect
dbDisconnect(conn)
runApp()
runApp()
runApp()
?fluidPage
?img
unom <- read.csv("mdata.csv")[,-1]
unom <- read.csv("mdata.csv")[,-1]
runApp()
sale <- read.csv("sale_by_week.csv")
head(sale)
sale <- read.csv("sale_by_week.csv")[,-1]
unom <- read.csv("mdata.csv")[,-1]
sale  %>% filter(Style_Color=="DTA1B2073BRN-PJA")
sale  %>% filter(Style_Color=="DTA4E2531BL")
unoq  %>% filter(ID=="DTA4E2531BL") %>% select(Warehouse_Qty) %>% tail(1)
unom  %>% filter(ID=="DTA4E2531BL") %>% select(Warehouse_Qty) %>% tail(1)
unom <- read.csv("mdata.csv")[,-1]
colnames(unom) <- c("ID","Product_Description","Date","Out_Qty","In_Qty","Warehouse_Qty","Unit_Price")
unom <- unom[complete.cases(unom),]
unoq <- read.csv("qdata.csv")[,-1]
colnames(unoq) <- c("ID","Product_Description","Date","Out_Qty","In_Qty","Warehouse_Qty","Unit_Price")
unoq <- unoq[complete.cases(unoq),]
sale <- read.csv("sale_by_week.csv")[,-1]
#EDA: DTA1B2073BRN-PJA
unoq  %>% filter(ID=="DTA1B2073BRN-PJA") %>% summarise(ITR = sum(Out_Qty)/mean(Warehouse_Qty),
ITR_d = 365/ITR)
unom  %>% filter(ID=="DTA1B2073BRN-PJA") %>% summarise(ITR = sum(Out_Qty)/mean(Warehouse_Qty),
ITR_d = 365/ITR)
unoq  %>% filter(ID=="DTA4E2531BL") %>% select(Warehouse_Qty) %>% tail(1)
unom  %>% filter(ID=="DTA4E2531BL") %>% select(Warehouse_Qty) %>% tail(1)
sale  %>% filter(Style_Color=="DTA4E2531BL")
library(lubridate)
sale  %>% filter(Style_Color=="DTA4E2531BL")  %>% mutate(ds = month(ds))
sale  %>% filter(Style_Color=="DTA4E2531BL")  %>% mutate(ds = format(as.Date(ds), "%Y-%m")
)
sale  %>% filter(Style_Color=="DTA4E2531BL")  %>% mutate(ds = format(as.Date(ds), "%Y-%m")) %>%
group_by(ds) %>% summarise(Quantity = sum(y))
install.packages("Prophet")
library(Prophet)
library(prophet)
install.packages("prophet")
library(prophet)
sample = sale%>%
filter(., Style_Color == "DTA4E2531GRY")%>%
select(., ds,y)
sample
sample = sale  %>% filter(Style_Color=="DTA4E2531BL")  %>% mutate(ds = format(as.Date(ds), "%Y-%m")) %>%
group_by(ds) %>% summarise(Quantity = sum(y))
m = prophet(sample, changepoint.prior.scale = 0.02)
sample = sale  %>% filter(Style_Color=="DTA4E2531BL")  %>% mutate(ds = format(as.Date(ds), "%Y-%m")) %>%
group_by(ds) %>% summarise(y = sum(y))
m = prophet(sample, changepoint.prior.scale = 0.02)
sample = sale  %>% filter(Style_Color=="DTA4E2531BL")
m = prophet(sample, changepoint.prior.scale = 0.02)
future = make_future_dataframe(m, periods=52, freq = 'weeks')
forecast = predict(m, future)
#Show the trend
prophet_plot_components(m, forecast)
#Show only the forecast Quantity
forecast = forecast%>%select(., ds,trend)
forecast
prophetts <- function(sample, input_radio){
m = prophet(sample, changepoint.prior.scale = 0.02)
future = make_future_dataframe(m, periods=52, freq = 'weeks')
forecast = predict(m, future)
if(input_radio==1){forecast = forecast%>%select(., ds,trend) %>% mutate(Time = format(as.Date(ds), "%Y-%m"))%>%
group_by(ds) %>% summarise(Quantity = sum(trend))}
else{forecast = forecast%>%select(., ds,trend) %>% mutate(Time = as.yearqtr(ds, format = "%Y-%m-%d"))%>%
group_by(ds) %>% summarise(Quantity = sum(trend))}
return(forecast)
}
prophetts(sample,1)
prophetts <- function(sample, input_radio){
m = prophet(sample, changepoint.prior.scale = 0.02)
future = make_future_dataframe(m, periods=52, freq = 'weeks')
forecast = predict(m, future)
if(input_radio==1){forecastts = forecast%>%select(., ds,trend) %>% mutate(Time = format(as.Date(ds), "%Y-%m"))%>%
group_by(ds) %>% summarise(Quantity = sum(trend))}
else{forecastts = forecast%>%select(., ds,trend) %>% mutate(Time = as.yearqtr(ds, format = "%Y-%m-%d"))%>%
group_by(ds) %>% summarise(Quantity = sum(trend))}
return(forecastts)
}
prophetts(sample,1)
forecast
forecast%>%select(., ds,trend) %>% mutate(Time = format(as.Date(ds), "%Y-%m"))%>%
group_by(ds) %>% summarise(Quantity = sum(trend))}
forecast %>% mutate(Time = format(as.Date(ds), "%Y-%m"))%>%
group_by(ds) %>% summarise(Quantity = sum(trend))}
forecast %>% mutate(Time = format(as.Date(ds), "%Y-%m"))%>%
group_by(ds) %>% summarise(Quantity = sum(trend))
forecast %>% mutate(Time = format(as.Date(ds), "%Y-%m"))%>%
group_by(Time) %>% summarise(Quantity = sum(trend))
prophetts <- function(sample, input_radio){
m = prophet(sample, changepoint.prior.scale = 0.02)
future = make_future_dataframe(m, periods=52, freq = 'weeks')
forecast = predict(m, future)
if(input_radio==1){forecastts = forecast%>%select(., ds,trend) %>% mutate(Time = format(as.Date(ds), "%Y-%m"))%>%
group_by(Time) %>% summarise(Quantity = sum(trend))}
else{forecastts = forecast%>%select(., ds,trend) %>% mutate(Time = as.yearqtr(ds, format = "%Y-%m-%d"))%>%
group_by(Time) %>% summarise(Quantity = sum(trend))}
return(forecastts)
}
prophetts(sample,1)
prophetts(sample,2)
plot(prophetts(sample,2))
runApp()
#EDA: DTA1B2073BRN-PJA
unoq  %>% filter(ID=="DTA4E2531BL") %>% summarise(ITR = sum(Out_Qty)/mean(Warehouse_Qty),
ITR_d = 365/ITR)
runApp()
library(rsconnect)
rsconnect::setAccountInfo(name='estherchang10', token='0E43FC12A1156AD66378A6522033A18D', secret='E3S4EmolvdLb0XgEAGec/kfCipdBB3Epa8NQ9wnA')
rsconnect::accounts()
runApp()
runApp()
runApp()
unique(sale$Style_Color)
runApp()
prophetts(sample,2)
prophetts(sample,2)[,1]
str(prophetts(sample,2)[,1])
as.text(prophetts(sample,2)[,1])
as.character(prophetts(sample,2)[,1])
runApp()
